package prototype;

import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

/**
 * Starts the game and its components and receives information to paint them.
 * @author jburka
 */
public class Pong extends JPanel {

    private static ArrayList<Player> players = new ArrayList<Player>();

    private static boolean morePlayers = true;

    private int xBall, yBall;
    private double direction;
    private String lastTouchedBall;
    private String lastToHitBall;

    private int xPaddle, yPaddle;
    private Ball ball;
    private Polygon poly;
    private Paddle paddle;
    private Keyboard keyboard = new Keyboard(); // for keyboard input (to be implemented)

    public Polygon getPoly() {
        return poly;
    }
    // Note, please make sure to add override annotations... makes things less confusing
    @Override
    
    /**
     * Paints all objects.
     * @param g Graphics object that paints the screen
     */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        poly = new Polygon(8, getWidth() / 2, getHeight() / 2, Math.min(getWidth(), getHeight()) / 2, ball.getRadius());

        Graphics2D g2 = (Graphics2D) g;
        g2.drawPolygon(poly.getPolygon());
        g.drawOval(xBall - ball.getRadius(), yBall - ball.getRadius(), ball.getRadius() * 2, ball.getRadius() * 2);
    }
    /**
     * The main method of the Pong Legacy game. Starts the GUI and ball.
     * @param args Command line arguments
     */
    public static void main(String[] args) {
        JFrame window = new JFrame("Pong Legacy");
        window.setSize(650, 650);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Pong panel = new Pong();
        panel.setBackground(Color.WHITE);
        Container c = window.getContentPane();
        c.add(panel);
        window.setVisible(true);
//        while(morePlayers) {
//            addPlayer();
//            isMorePlayers();
//        }
        panel.init();
        System.out.println(players);
    }

    /**
     * Asks the user if there are more players to add. Not used in network game.
     * @deprecated
     */
    public static void isMorePlayers() {
        String more =JOptionPane.showInputDialog(null,"Are there more Players to add? Y/N");
        if (more.equalsIgnoreCase("N")) morePlayers = false;
    }

    /**
     * Adds a new player to the game.
     */
    public static void addPlayer() {
        String name =JOptionPane.showInputDialog(null,"What's your name?");
        players.add(new Player(name));
    }

    /**
     * If a goal is detected this method calculates which player scored and who was scored on.
     */
    public void goalDetected() {
        for (int i = 0; i<players.size(); i++) {
            if(players.get(i).getName().equalsIgnoreCase(lastTouchedBall)) {players.get(i).scoresGoal();} //print to log
        }
    }

    /**
     * If a hit is detected this method registers who hit the ball.
     */
    public void hitDetected() {
        for (int i = 0; i<players.size(); i++) {
            if(players.get(i).getName().equalsIgnoreCase(lastToHitBall)) {players.get(i).hitsBall();} //print to log
        }
    }

    /**
     * Initializes a new ball and paddle - starts the game.
     */
    public void init() { 
        ball = new Ball(1, 200, 200, 5, this, 10);
        xBall = 200;
        yBall = 200;
        paddle = new Paddle(30, 10, 90, 100, 10, 500, this);
        Timer timer = new Timer(36, new TimeAction());
        //timer.setInitialDelay(3000);
        timer.start();
    }

    /**
     * Sets the location of the Ball.
     * @param xLoc X-Location of the ball
     * @param yLoc Y-Location of the ball
     */
    public void setLoc(int xLoc, int yLoc) {
        this.xBall = xLoc;
        this.yBall = yLoc;
        this.repaint();
    }
    
    /**
     * Contains the timer action that is called by the timer.
     * 
     * @author jburka
     */
    class TimeAction extends AbstractAction {
    	
    	/**
    	 * Moves the ball and paddle(s) when called by the timer. 
    	 * @param arg0 Event generated by the timer
    	 */
        public void actionPerformed(ActionEvent arg0) {
            ball.move();
            if(keyboard.checkKey(20)) paddle.move(keyboard.checkKey(70), 3);
        }
    }
}
